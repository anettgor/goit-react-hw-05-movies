{"version":3,"file":"static/js/76.186d6326.chunk.js","mappings":"kPACA,EAA0B,sB,6BC4C1B,MAvCA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAG,+CAC0BL,EAD1B,4BADG,mCACH,mBAWT,OARAM,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,qGACEC,EAAAA,EAAAA,GAAUH,GADZ,OACVI,EADU,OAEhBC,QAAQC,IAAIF,GACZL,EAAQK,EAAIN,MAHI,2CAAH,qDAKfI,GACD,GAAE,CAACF,KAEF,eAAIO,UAAWC,EAAf,SACGV,EAAKW,OAAS,GACbX,EAAKY,KAAI,SAAAC,GACP,OACE,0BAC+B,OAA5BA,EAAWC,cACV,gBAAKC,IAAG,qBAAgBF,EAAWG,MAAQC,IAAKC,KAEhD,gBACEH,IAAG,qBAAgBF,EAAWG,MAC9BC,IAAG,yCAAoCJ,EAAWC,iBAItD,uBAAID,EAAWG,QACf,uCAAeH,EAAWM,eAXnBN,EAAWO,GAcvB,KAGR,C,qBCtCD,IALkB,SAAAC,GAAG,OACnBC,MAAMD,GACHE,MAAK,SAAAjB,GAAG,OAAIA,EAAIkB,MAAR,IACRC,OAAM,SAAAC,GAAK,OAAInB,QAAQC,IAAIkB,EAAhB,GAHK,C,+GCArB,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOV,GAEP,YADAI,EAAOJ,EAET,CAEIS,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOb,KAAKQ,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","utils/fetchMovies.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gallery\":\"Cast_gallery__LrDoG\"};","import { useEffect, useState } from 'react';\nimport fetchData from './../../utils/fetchMovies';\nimport css from './Cast.module.css';\nimport { useParams } from 'react-router-dom';\nimport placeholder from './../../images/placeholder.jpg';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const key = '7bfaca5914dfe808eee9ce7ecac1ff40';\n  const URL = `\nhttps://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}&language=en-US`;\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      const res = await fetchData(URL);\n      console.log(res);\n      setCast(res.cast);\n    };\n    fetchCast();\n  }, [URL]);\n  return (\n    <ul className={css.gallery}>\n      {cast.length > 0 &&\n        cast.map(castMember => {\n          return (\n            <li key={castMember.id}>\n              {castMember.profile_path === null ? (\n                <img alt={`Profile of ${castMember.name}`} src={placeholder} />\n              ) : (\n                <img\n                  alt={`Profile of ${castMember.name}`}\n                  src={`https://image.tmdb.org/t/p/w200${castMember.profile_path}`}\n                />\n              )}\n\n              <p>{castMember.name}</p>\n              <p>Character: {castMember.character}</p>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n\nexport default Cast;\n","const fetchData = url =>\n  fetch(url)\n    .then(res => res.json())\n    .catch(error => console.log(error));\n\nexport default fetchData;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","cast","setCast","URL","useEffect","fetchCast","fetchData","res","console","log","className","css","length","map","castMember","profile_path","alt","name","src","placeholder","character","id","url","fetch","then","json","catch","error","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}